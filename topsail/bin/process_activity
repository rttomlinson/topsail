#!/usr/bin/env perl

$| = 1;
use v5.030;
use warnings;
use strictures 2;
no warnings 'uninitialized';
use Errno;
use Carp 'confess';
use JSON::PP;
use AWS::CLIWrapper;
use JSON::PP;
use POSIX ":sys_wait_h";
use Getopt::Long;
use Data::UUID;

use Topsail::Workflow;
Getopt::Long::Configure("pass_through");

my ($activity_arn,);

GetOptions(
  'activity-arn=s' => \$activity_arn,
)
  or die("Error in command line arguments");

# from file
# from argument
# from url
# from docker tag
# from docker label

say("Activity ARN: $activity_arn");

my $aws = AWS::CLIWrapper->new(
    region => 'us-east-1',
);

my $task_token;
my $task_input_json;

my $task_input;
my $task_payload;
my $task_execution_id;

while(1) {
    # This API action isn’t logged in CloudTrail.
    say "Polling for next activity: $activity_arn";
    my $res = $aws->stepfunctions(
        'get-activity-task' => {
            "activity-arn" => $activity_arn,
            "worker-name" => "trashcan-mansadfads"
        },
        timeout => 65, # https://docs.aws.amazon.com/step-functions/latest/dg/troubleshooting-activities.html
    );

    # ideally we could get the step function execution id that generated the activity
    
    if ($res) {
        say "got activity from $activity_arn";
        $task_token = $res->{taskToken};
        say "got task token $task_token";
        $task_input_json = $res->{input};
        $task_input = decode_json $task_input_json;

        $task_payload = $task_input->{input};
        $task_execution_id = $task_input->{execution_id};

        last;

    } else {
        warn $AWS::CLIWrapper::Error->{Code};
        warn $AWS::CLIWrapper::Error->{Message};
    }
}
# start heartbeat cron
say "starting heartbeat";

# should need to validate here
my $deployment_spec = $task_payload->{deployment_spec};
my $deployment_spec_json = encode_json($deployment_spec);
# can be undefined or empty
my $contexts = $task_payload->{contexts}; 
$contexts //= ();

my $pid = fork();
die "unable to fork: $!" unless defined($pid);
if (!$pid) {  # child
    say "i'm the child process";
    while(1) {
        say "pump the heart. until parent kills it";
        my $heartbeat_res = $aws->stepfunctions(
            'send-task-heartbeat' => {
                "task-token" => $task_token,
            },
            timeout => 30, # optional. default is 30 seconds
        );
        
        if ($heartbeat_res) {
            say "lub-bub";
            say "send heartbeat success: $heartbeat_res";    
        } else {
            warn $AWS::CLIWrapper::Error->{Code};
            warn $AWS::CLIWrapper::Error->{Message};
        }
        sleep 15;        
    }        
}

my $kid = waitpid($pid, WNOHANG);
# parent continues here, pid of child is in $pid
say "pid of child is $pid";
# kill heartbeat cron

# choice?
my $service_manifest;
my $original_deployment_spec;
if(defined $deployment_spec_json) {
    $original_deployment_spec = decode_json $deployment_spec_json;
} elsif(defined $deployment_spec) {
    $original_deployment_spec = $deployment_spec;
}

# Is it okay to change the deployment context for each step? Probably but we should want to record it somewhere whats happening and _how_ we got to the deployment spec we're using

confess "valid service manifest not found" unless defined $original_deployment_spec;
# Need to be env var equivalents

my %payload = ();
my $deployment_contexts = $contexts;
my $overall_state_of_the_system = '';
my @steps_performed;
my $steps_performed = \@steps_performed;


say "starting process activity";
# unique execution flow here
# hopefully we can get this value so we can emit it for another process to pick up to parse logs
my $execution_id = $task_input->{execution_id};
$execution_id //= 'undefined';
$steps_performed = Topsail::Workflow::execute_workflow(starting_contexts => $deployment_contexts, original_deployment_spec => $original_deployment_spec);

say "finish running the script. yay";

say $task_token;
say $task_input;

# process the workflow spec

my $task_output;

$task_output //= '{}';

# This API action isn’t logged in CloudTrail. 
my $send_task_success_res = $aws->stepfunctions(
    'send-task-success' => {
        "task-token" => $task_token,
        "task-output" => $task_output,
    },
    timeout => 30, # optional. default is 30 seconds
);
 
if ($send_task_success_res) {
    say "send task success: $send_task_success_res";    
} else {
    warn $AWS::CLIWrapper::Error->{Code};
    warn $AWS::CLIWrapper::Error->{Message};
}

# kill the child
kill 9, $pid;                    # must it be 9 (SIGKILL)? 
my $gone_pid = waitpid $pid, 0;  # then check that it's gone

1;