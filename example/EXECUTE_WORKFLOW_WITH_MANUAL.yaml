AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::LanguageExtensions"
Description: "AWS Step Functions Human based task example. It sends an email with an HTTP URL for approval."
Parameters:
    Email:
        Type: String
        AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
        ConstraintDescription: Must be a valid email address.
    WorkflowRoleArn:
        Description: "Shared permissions across workflow resources"
        Type: "String"
        MinLength: 1 # pseudo required
        # MaxLength: 255,
        # AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
Resources:
    WorkflowExecutor:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            DefinitionString:
                Fn::Sub: |
                    {
                        "StartAt": "Decide",
                        "States": {
                            "Decide": {
                                "Type": "Task",
                                "Resource": "arn:aws:lambda:::function:topsail-decider-lambda",
                                "Parameters": {
                                    "input.$": "$",
                                    "step_function_execution_id.$": "$$.Execution.Id"
                                },
                                "Next": "Choose action"
                            },
                            "Choose action": {
                                "Type": "Choice",
                                "Choices": [
                                    {
                                        "Variable": "$.execution_state.step_type",
                                        "StringEquals": "Complete",
                                        "Next": "Process finished"
                                    },
                                    {
                                        "Variable": "$.execution_state.step_type",
                                        "StringEquals": "Task",
                                        "Next": "Execute"
                                    },
                                    {
                                        "Variable": "$.execution_state.step_type",
                                        "StringEquals": "Manual_Approval",
                                        "Next": "Lambda Callback"
                                    },
                                    {
                                        "Variable": "$.execution_state.step_type",
                                        "StringEquals": "MANUAL_APPROVAL_PLACEHOLDER",
                                        "Next": "ManualApproval"
                                    }
                                ]
                            },
                            "Execute": {
                                "Type": "Task",
                                "Resource": "arn:aws:lambda:::function:topsail-lambda",
                                "Parameters": {
                                    "input.$": "$",
                                    "step_function_execution_id.$": "$$.Execution.Id"
                                },
                                "Next": "Decide"
                            },
                            "ManualApproval": {
                                "Type": "Task",
                                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                                "Parameters": {
                                    "FunctionName": "${LambdaHumanApprovalSendEmailFunction.Arn}",
                                    "Payload": {
                                        "input.$": "$",
                                        "ExecutionContext.$": "$$",
                                        "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
                                    }
                                },
                                "Next": "ManualApprovalChoiceState"
                            },
                            "Lambda Callback": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                                "Parameters": {
                                    "FunctionName": "${LambdaHumanApprovalSendEmailFunction.Arn}",
                                    "Payload": {
                                        "ExecutionContext.$": "$$",
                                        "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
                                    }
                                },
                                "Next": "ManualApprovalChoiceState"
                            },
                            "ManualApprovalChoiceState": {
                                "Type": "Choice",
                                "Choices": [
                                    {
                                        "Variable": "$.Status",
                                        "StringEquals": "Approved! Task approved by ${Email}",
                                        "Next": "ApprovedPassState"
                                    },
                                    {
                                        "Variable": "$.Status",
                                        "StringEquals": "Rejected! Task rejected by ${Email}",
                                        "Next": "RejectedPassState"
                                    }
                                ]
                            },
                            "ApprovedPassState": {
                                "Type": "Pass",
                                "End": true
                            },
                            "RejectedPassState": {
                                "Type": "Pass",
                                "End": true
                            },
                            "Process finished": {
                                "Type": "Succeed"
                            }
                        }
                    }

            RoleArn: !Ref WorkflowRoleArn
            StateMachineName: WorkflowExecutorWithManual
    # Begin API Gateway Resources
    ExecutionApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "Human approval endpoint"
            Description: "HTTP Endpoint backed by API Gateway and Lambda"
            FailOnWarnings: true

    ExecutionResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ExecutionApi
            ParentId: !GetAtt "ExecutionApi.RootResourceId"
            PathPart: execution

    ExecutionMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            HttpMethod: GET
            Integration:
                Type: AWS
                IntegrationHttpMethod: POST
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApprovalFunction.Arn}/invocations"
                IntegrationResponses:
                    - StatusCode: 302
                      ResponseParameters:
                          method.response.header.Location: "integration.response.body.headers.Location"
                RequestTemplates:
                    application/json: |
                        {
                          "body" : $input.json('$'),
                          "headers": {
                            #foreach($header in $input.params().header.keySet())
                            "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                            #end
                          },
                          "method": "$context.httpMethod",
                          "params": {
                            #foreach($param in $input.params().path.keySet())
                            "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                            #end
                          },
                          "query": {
                            #foreach($queryParam in $input.params().querystring.keySet())
                            "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                            #end
                          }  
                        }
            ResourceId: !Ref ExecutionResource
            RestApiId: !Ref ExecutionApi
            MethodResponses:
                - StatusCode: 302
                  ResponseParameters:
                      method.response.header.Location: true

    ApiGatewayAccount:
        Type: "AWS::ApiGateway::Account"
        Properties:
            CloudWatchRoleArn: !GetAtt "ApiGatewayCloudWatchLogsRole.Arn"

    ApiGatewayCloudWatchLogsRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action:
                          - "sts:AssumeRole"
            Policies:
                - PolicyName: ApiGatewayLogsPolicy
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - "logs:*"
                            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

    ExecutionApiStage:
        DependsOn:
            - ApiGatewayAccount
        Type: "AWS::ApiGateway::Stage"
        Properties:
            DeploymentId: !Ref ApiDeployment
            MethodSettings:
                - DataTraceEnabled: true
                  HttpMethod: "*"
                  LoggingLevel: INFO
                  ResourcePath: /*
            RestApiId: !Ref ExecutionApi
            StageName: states

    ApiDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - ExecutionMethod
        Properties:
            RestApiId: !Ref ExecutionApi
            StageName: DummyStage
    # End API Gateway Resources

    # Begin
    # Lambda that will be invoked by API Gateway
    LambdaApprovalFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile:
                    Fn::Sub: |
                        const { SFN: StepFunctions } = require("@aws-sdk/client-sfn");
                        var redirectToStepFunctions = function(lambdaArn, statemachineName, executionName, callback) {
                          const lambdaArnTokens = lambdaArn.split(":");
                          const partition = lambdaArnTokens[1];
                          const region = lambdaArnTokens[3];
                          const accountId = lambdaArnTokens[4];

                          console.log("partition=" + partition);
                          console.log("region=" + region);
                          console.log("accountId=" + accountId);

                          const executionArn = "arn:" + partition + ":states:" + region + ":" + accountId + ":execution:" + statemachineName + ":" + executionName;
                          console.log("executionArn=" + executionArn);

                          const url = "https://console.aws.amazon.com/states/home?region=" + region + "#/executions/details/" + executionArn;
                          callback(null, {
                              statusCode: 302,
                              headers: {
                                Location: url
                              }
                          });
                        };

                        exports.handler = (event, context, callback) => {
                          console.log('Event= ' + JSON.stringify(event));
                          const action = event.query.action;
                          const taskToken = event.query.taskToken;
                          const statemachineName = event.query.sm;
                          const executionName = event.query.ex;

                          const stepfunctions = new StepFunctions();

                          var message = "";

                          if (action === "approve") {
                            message = { "Status": "Approved! Task approved by ${Email}" };
                          } else if (action === "reject") {
                            message = { "Status": "Rejected! Task rejected by ${Email}" };
                          } else {
                            console.error("Unrecognized action. Expected: approve, reject.");
                            callback({"Status": "Failed to process the request. Unrecognized Action."});
                          }

                          stepfunctions.sendTaskSuccess({
                            output: JSON.stringify(message),
                            taskToken: event.query.taskToken
                          })
                          .then(function(data) {
                            redirectToStepFunctions(context.invokedFunctionArn, statemachineName, executionName, callback);
                          }).catch(function(err) {
                            console.error(err, err.stack);
                            callback(err);
                          });
                        }
            Description: Lambda function that callback to AWS Step Functions
            FunctionName: LambdaApprovalFunction
            Handler: index.handler
            Role: !GetAtt "LambdaApiGatewayIAMRole.Arn"
            Runtime: nodejs18.x

    LambdaApiGatewayInvoke:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "LambdaApprovalFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExecutionApi}/*"

    LambdaApiGatewayIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                          - "sts:AssumeRole"
                      Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
            Policies:
                - PolicyName: CloudWatchLogsPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - "logs:*"
                            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
                - PolicyName: StepFunctionsPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - "states:SendTaskFailure"
                                - "states:SendTaskSuccess"
                            Resource: "*"
    # End Lambda that will be invoked by API Gateway

    # Begin state machine that publishes to Lambda and sends an email with the link for approval
    HumanApprovalLambdaStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            RoleArn: !GetAtt LambdaStateMachineExecutionRole.Arn
            DefinitionString:
                Fn::Sub: |
                    {
                        "StartAt": "Lambda Callback",
                        "TimeoutSeconds": 3600,
                        "States": {
                            "Lambda Callback": {
                                "Type": "Task",
                                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                                "Parameters": {
                                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction.Arn}",
                                  "Payload": {
                                    "ExecutionContext.$": "$$",
                                    "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
                                  }
                                },
                                "Next": "ManualApprovalChoiceState"
                            },
                            "ManualApprovalChoiceState": {
                              "Type": "Choice",
                              "Choices": [
                                {
                                  "Variable": "$.Status",
                                  "StringEquals": "Approved! Task approved by ${Email}",
                                  "Next": "ApprovedPassState"
                                },
                                {
                                  "Variable": "$.Status",
                                  "StringEquals": "Rejected! Task rejected by ${Email}",
                                  "Next": "RejectedPassState"
                                }
                              ]
                            },
                            "ApprovedPassState": {
                              "Type": "Pass",
                              "End": true
                            },
                            "RejectedPassState": {
                              "Type": "Pass",
                              "End": true
                            }
                        }
                    }

    SNSHumanApprovalEmailTopic:
        Type: AWS::SNS::Topic
        Properties:
            Subscription:
                - Endpoint: !Sub ${Email}
                  Protocol: email

    LambdaHumanApprovalSendEmailFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: "index.lambda_handler"
            Role: !GetAtt LambdaSendEmailExecutionRole.Arn
            Runtime: "nodejs18.x"
            Timeout: "25"
            Code:
                ZipFile:
                    Fn::Sub: |
                        console.log('Loading function');
                        const { SNS } = require("@aws-sdk/client-sns");
                        exports.lambda_handler = (event, context, callback) => {
                            console.log('event= ' + JSON.stringify(event));
                            console.log('context= ' + JSON.stringify(context));

                            const executionContext = event.ExecutionContext;
                            console.log('executionContext= ' + executionContext);

                            const executionName = executionContext.Execution.Name;
                            console.log('executionName= ' + executionName);

                            const statemachineName = executionContext.StateMachine.Name;
                            console.log('statemachineName= ' + statemachineName);

                            const taskToken = executionContext.Task.Token;
                            console.log('taskToken= ' + taskToken);

                            const apigwEndpint = event.APIGatewayEndpoint;
                            console.log('apigwEndpint = ' + apigwEndpint)

                            const approveEndpoint = apigwEndpint + "/execution?action=approve&ex=" + executionName + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
                            console.log('approveEndpoint= ' + approveEndpoint);

                            const rejectEndpoint = apigwEndpint + "/execution?action=reject&ex=" + executionName + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
                            console.log('rejectEndpoint= ' + rejectEndpoint);

                            const emailSnsTopic = "${SNSHumanApprovalEmailTopic}";
                            console.log('emailSnsTopic= ' + emailSnsTopic);

                            var emailMessage = 'Welcome! \n\n';
                            emailMessage += 'This is an email requiring an approval for a step functions execution. \n\n'
                            emailMessage += 'Please check the following information and click "Approve" link if you want to approve. \n\n'
                            emailMessage += 'Execution Name -> ' + executionName + '\n\n'
                            emailMessage += 'Approve ' + approveEndpoint + '\n\n'
                            emailMessage += 'Reject ' + rejectEndpoint + '\n\n'
                            emailMessage += 'Thanks for using Step functions!'
                            
                            const sns = new SNS();
                            var params = {
                              Message: emailMessage,
                              Subject: "Required approval from AWS Step Functions",
                              TopicArn: emailSnsTopic
                            };

                            sns.publish(params)
                              .then(function(data) {
                                console.log("MessageID is " + data.MessageId);
                                callback(null);
                              }).catch(
                                function(err) {
                                console.error(err, err.stack);
                                callback(err);
                              });
                        }

    LambdaStateMachineExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: states.amazonaws.com
                      Action: "sts:AssumeRole"
            Policies:
                - PolicyName: InvokeCallbackLambda
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - "lambda:InvokeFunction"
                            Resource:
                                - !Sub "${LambdaHumanApprovalSendEmailFunction.Arn}"

    LambdaSendEmailExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            Policies:
                - PolicyName: CloudWatchLogsPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
                - PolicyName: SNSSendEmailPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - "SNS:Publish"
                            Resource:
                                - !Sub "${SNSHumanApprovalEmailTopic}"

# End state machine that publishes to Lambda and sends an email with the link for approval
Outputs:
    ApiGatewayInvokeURL:
        Value: !Sub "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
    StateMachineHumanApprovalArn:
        Value: !Ref HumanApprovalLambdaStateMachine
